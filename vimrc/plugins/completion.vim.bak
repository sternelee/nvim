let g:completion_chain_complete_list = {
    \ 'default': [
    \    {'complete_items': ['lsp', 'buffers', 'snippet', 'tabnine' ]},
    \    {'mode': '<c-p>'},
    \    {'mode': '<c-n>'}
    \]
\}

let g:completion_enable_snippet = 'vim-vsnip'
let g:completion_tabnine_priority = 50
let g:completion_tabnine_sort_by_details=1

inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
let g:completion_confirm_key = ""
imap <expr> <cr>  pumvisible() ? complete_info()["selected"] != "-1" ?
                 \ "\<Plug>(completion_confirm_completion)"  : "\<c-e>\<CR>" :  "\<CR>"

lua << EOF
local nvim_lsp = require('lspconfig')
local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities.textDocument.completion.completionItem.snippetSupport = true
capabilities.textDocument.completion.completionItem.resolveSupport = {
  properties = {
    'documentation',
    'detail',
    'additionalTextEdits',
  }
}

local servers = { "vls", "cssls", "html", "rls", "tsserver",  "graphql" }
local completion = require('completion')
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = completion.on_attach,
    capabilities = capabilities,
  }
end

local servers2 = { "bashls", "jsonls",  "dockerls", "vimls", "yamlls" }
for _, lsp in ipairs(servers2) do
  nvim_lsp[lsp].setup {
    on_attach = completion.on_attach,
  }
end

require('nvim-autopairs').setup({
  disable_filetype = { "TelescopePrompt" , "vim" },
})
local remap = vim.api.nvim_set_keymap
local npairs = require('nvim-autopairs')

EOF
